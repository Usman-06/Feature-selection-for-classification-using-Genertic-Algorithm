# Import necessary libraries
import pandas as pd
from sklearn import tree
from sklearn.metrics import accuracy_score, classification_report
from random import randint, random

# Function to get selected features
def get_selected_features(selected_features, all_features):
    selected_f = []
    for sample in all_features:
        s_f = [sample[i] for i in range(len(selected_features)) if selected_features[i] == 1]
        selected_f.append(s_f)
    return selected_f

# Function to get predicted labels
def get_predicted_labels(class_prob):
    predicted_labels = [p.argmax() + 1 for p in class_prob]
    return predicted_labels

# Function to calculate misclassification percentages for each class
def get_class_miss_percentages(true_labels, predicted_labels):
    c1_missed, c1_tot, c2_missed, c2_tot, c3_missed, c3_tot = 0, 0, 0, 0, 0, 0

    for i in range(len(true_labels)):
        if true_labels[i] == 1:
            c1_tot += 1
            if true_labels[i] != predicted_labels[i]:
                c1_missed += 1
        if true_labels[i] == 2:
            c2_tot += 1
            if true_labels[i] != predicted_labels[i]:
                c2_missed += 1
        if true_labels[i] == 3:
            c3_tot += 1
            if true_labels[i] != predicted_labels[i]:
                c3_missed += 1

    c1_miss_percent = (100.00 * c1_missed) / c1_tot  
    c2_miss_percent = (100.00 * c2_missed) / c2_tot
    c3_miss_percent = (100.00 * c3_missed) / c3_tot

    if c1_miss_percent <= 1:
        c1_miss_percent = 1
    if c2_miss_percent <= 1:
        c2_miss_percent = 1
    if c3_miss_percent <= 1:
        c3_miss_percent = 1

    print("Missed samples for each class:", c1_missed, c2_missed, c3_missed)

    return c1_miss_percent, c2_miss_percent, c3_miss_percent

# Function to load data from files and convert data types
def load_data():
    dataset_path = 'path_to_dataset.csv'  # Replace 'path_to_dataset.csv' with the actual path to your dataset
    data = pd.read_csv(dataset_path)
    features = data.drop(columns=['target'])  # Assuming the target column is named 'target'
    labels = data['target']
    costs = [1] * len(features.columns)  # Replace [1] with actual feature costs if available

    return features.values, labels.values, features.values, labels.values, costs

# Function to convert data types to the appropriate format
def convert_types(data):
    data[0] = data[0].astype(float)
    data[1] = data[1].astype(int)
    # ... (similarly, convert other columns to appropriate data types)

# Rest of the code remains unchanged

if __name__ == "__main__":
    main()
